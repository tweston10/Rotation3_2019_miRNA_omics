}
}
for(i in 1:dim(adj)[1]) {
for(j in 1:dim(adj)[2]){
row = rownames(adj.weight)[i]
col = colnames(adj.weight)[j]
count = as.integer(TarPred %>% filter(miRNA==i,Gene==j) %>% select('No. Sources'))
if(count == NA_integer_){
adj.weight[i,j] = 0
} else if(count >= 2) {
adj.weight[i,j] = adj[i,j]*1
} else if(count == 1) {
adj.weight[i,j] = adj[i,j]*0.75
} else {
adj.weight[i,j] = 0
}
}
}
for(i in 1:dim(adj)[1]) {
for(j in 1:dim(adj)[2]){
row = rownames(adj.weight)[i]
col = colnames(adj.weight)[j]
count = TarPred %>% filter(miRNA==i,Gene==j) %>% select('No. Sources')
if(is.na(count)){
adj.weight[i,j] = 0
} else if(count >= 2) {
adj.weight[i,j] = adj[i,j]*1
} else if(count == 1) {
adj.weight[i,j] = adj[i,j]*0.75
} else {
adj.weight[i,j] = 0
}
}
}
for(i in 1:dim(adj)[1]) {
for(j in 1:dim(adj)[2]){
row = rownames(adj.weight)[i]
col = colnames(adj.weight)[j]
count = TarPred %>% filter(miRNA==i,Gene==j) %>% select('No. Sources')
if(is.na(count) || count == ''){
adj.weight[i,j] = 0
} else if(count >= 2) {
adj.weight[i,j] = adj[i,j]*1
} else if(count == 1) {
adj.weight[i,j] = adj[i,j]*0.75
} else {
adj.weight[i,j] = 0
}
}
}
as.integer(TarPred %>%
filter(miRNA=='miR-122-5p',Gene=='PGF') %>%
select('No. Sources'))
row = 'miR-122-5p'
col = 'PGF'
as.integer(TarPred %>%
filter(miRNA==i,Gene==j) %>%
select('2+Tools')))
as.integer(TarPred %>%
filter(miRNA==i,Gene==j) %>%
select('2+Tools'))
as.integer(TarPred %>%
filter(miRNA==row,Gene==col) %>%
select('2+Tools'))
as.integer(TarPred %>%
filter(miRNA==row,Gene==col) %>%
select('No. Sources'))
for(i in 1:dim(adj)[1]) {
for(j in 1:dim(adj)[2]){
row = rownames(adj.weight)[i]
col = colnames(adj.weight)[j]
count = TarPred %>% filter(miRNA==row,Gene==col) %>% select('No. Sources')
if(is.na(count) || count == ''){
adj.weight[i,j] = 0
} else if(count >= 2) {
adj.weight[i,j] = adj[i,j]*1
} else if(count == 1) {
adj.weight[i,j] = adj[i,j]*0.75
} else {
adj.weight[i,j] = 0
}
}
}
for(i in 1:dim(adj)[1]) {
for(j in 1:dim(adj)[2]){
row = rownames(adj.weight)[i]
col = colnames(adj.weight)[j]
count = TarPred %>% filter(miRNA==row,Gene==col) %>% select('No. Sources')
if(count >= 2) {
adj.weight[i,j] = adj[i,j]*1
} else if(count == 1) {
adj.weight[i,j] = adj[i,j]*0.75
} else {
adj.weight[i,j] = 0
}
}
}
for(i in 1:dim(adj)[1]) {
for(j in 1:dim(adj)[2]){
row = rownames(adj.weight)[i]
col = colnames(adj.weight)[j]
count = as.integer(TarPred %>% filter(miRNA==row,Gene==col) %>% select('No. Sources'))
if(count >= 2) {
adj.weight[i,j] = adj[i,j]*1
} else if(count == 1) {
adj.weight[i,j] = adj[i,j]*0.75
} else {
adj.weight[i,j] = 0
}
}
}
for(i in 1:dim(adj)[1]) {
for(j in 1:dim(adj)[2]){
row = rownames(adj.weight)[i]
col = colnames(adj.weight)[j]
count = as.integer(TarPred %>% filter(miRNA==row,Gene==col) %>% select('No. Sources'))
if(is.na(count) || count == ''){
adj.weight[i,j] = 0
} else if(count >= 2) {
adj.weight[i,j] = adj[i,j]*1
} else if(count == 1) {
adj.weight[i,j] = adj[i,j]*0.75
} else {
adj.weight[i,j] = 0
}
}
}
View(adj)
rows_to_remove.adj <- which(row.names(adj.weight) %in% prot.F)
cols_to_remove.adj <- which(colnames(adj.weight) %in% miR.F)
adj.weight.F <- adj.Weight[-rows_to_remove.adj,-cols_to_remove.adj]
adj.weight.F <- adj.weight[-rows_to_remove.adj,-cols_to_remove.adj]
View(adj.weight.F)
write.csv(adj.weight.F,"Weighted_Adjacencies.csv")
write(as.character(std.gene.names), file = "GeneNames.txt", sep = "\n")
RawData2 <- RawData %>% rownames_to_column(' ')
write.table(RawData2, file = "GeneData.txt", sep = "\t",
row.names = FALSE, col.names = TRUE)
write.table(Protein_Data, file = "Protein_Data.txt", sep = "\t",
row.names = FALSE, col.names = TRUE)
View(Corr)
Corr.weight <- data.frame(matrix(nrow=178,ncol=178))
row.names(Corr.weight) = row.names(Corr)
colnames(Corr.weight) = colnames(Corr)
for(i in 1:dim(adj)[1]) {
for(j in 1:dim(adj)[2]){
row = rownames(Corr.weight)[i]
col = colnames(Corr.weight)[j]
count = as.integer(TarPred %>% filter(miRNA==row,Gene==col) %>% select('No. Sources'))
if(is.na(count) || count == ''){
adj.weight[i,j] = 0
} else if(count >= 2) {
adj.weight[i,j] = adj[i,j]*1
} else if(count == 1) {
adj.weight[i,j] = adj[i,j]*0.75
} else {
adj.weight[i,j] = 0
}
}
}
View(Corr.weight)
for(i in 1:dim(adj)[1]) {
for(j in 1:dim(adj)[2]){
row = rownames(Corr.weight)[i]
col = colnames(Corr.weight)[j]
count = as.integer(TarPred %>% filter(miRNA==row,Gene==col) %>% select('No. Sources'))
if(is.na(count) || count == ''){
Corr.weight[i,j] = 0
} else if(count >= 2) {
Corr.weight[i,j] = adj[i,j]*1
} else if(count == 1) {
Corr.weight[i,j] = adj[i,j]*0.75
} else {
Corr.weight[i,j] = 0
}
}
}
for(i in 1:dim(adj)[1]) {
for(j in 1:dim(adj)[2]){
row = rownames(adj.weight)[i]
col = colnames(adj.weight)[j]
count = as.integer(TarPred %>% filter(miRNA==row,Gene==col) %>% select('No. Sources'))
if(is.na(count) || count == ''){
adj.weight[i,j] = 0
} else if(count >= 2) {
adj.weight[i,j] = adj[i,j]*1
} else if(count == 1) {
adj.weight[i,j] = adj[i,j]*0.75
} else {
adj.weight[i,j] = 0
}
}
}
rows_to_remove.corr <- which(row.names(Corr.weight) %in% prot.F)
cols_to_remove.corr <- which(colnames(Corr.weight) %in% miR.F)
Corr.weight.F <- Corr.weight[-rows_to_remove.adj,-cols_to_remove.adj]
write.csv(Corr.weight.F,"Weighted_Spearman.csv")
for(i in 1:dim(Corr)[1]) {
for(j in 1:dim(Corr)[2]){
row = rownames(Corr.weight)[i]
col = colnames(Corr.weight)[j]
count = as.integer(TarPred %>% filter(miRNA==row,Gene==col) %>% select('No. Sources'))
if(is.na(count) || count == ''){
Corr.weight[i,j] = 0
} else if(count >= 2) {
Corr.weight[i,j] = Corr[i,j]*1
} else if(count == 1) {
Corr.weight[i,j] = Corr[i,j]*0.75
} else {
Corr.weight[i,j] = 0
}
}
}
rows_to_remove.corr <- which(row.names(Corr.weight) %in% prot.F)
cols_to_remove.corr <- which(colnames(Corr.weight) %in% miR.F)
Corr.weight.F <- Corr.weight[-rows_to_remove.adj,-cols_to_remove.adj]
write.csv(Corr.weight.F,"Weighted_Spearman.csv")
write.csv(Corr.weight.F,"Weighted_Spearman.csv")
plotEigengeneNetworks(MEs, "", marDendro = c(0,4,1,2), marHeatmap = c(3,4,1,2))
corrplot(cor(MEs, method = "spearman", use = "pairwise.complete.obs"),
method = "circle", order = "hclust",
tl.cex = 0.8)
sizeGrWindow(18, 9)
par(mfrow = c(1,1));
cex1 = 0.9;
corrplot(cor(MEs, method = "spearman", use = "pairwise.complete.obs"),
method = "circle", order = "hclust",
tl.cex = 0.8)
View(Corr.weight.F)
View(RawData)
View(t_Rawdata)
powers = c(c(1:10), seq(from = 12, to=20, by=2));
sft=pickSoftThreshold(t_Rawdata,dataIsExpr = TRUE,powerVector = powers,
corFnc = cor,corOptions = list(use = 'p', method = 'spearman'),
networkType = "unsigned")
# Plot the results
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit, signed R^2",type="n", main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],labels=powers,cex=cex1,col="red");
# Red line corresponds to using an R^2 cut-off
abline(h=0.80,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
softPower = 5;
#turn adjacency matrix into topological overlap to minimize the effects of noise and spurious associations
TOM=TOMsimilarityFromExpr(t_Rawdata, networkType = "unsigned", TOMType = "unsigned", power = softPower);
colnames(TOM) =rownames(TOM) =gene.names
dissTOM=1-TOM
library(tidyverse)
library(corrplot)
library(WGCNA)
library(readxl)
library(data.table)
library(flashClust)
options(stringsAsFactors = FALSE);
enableWGCNAThreads()
#turn adjacency matrix into topological overlap to minimize the effects of noise and spurious associations
TOM=TOMsimilarityFromExpr(t_Rawdata, networkType = "unsigned", TOMType = "unsigned", power = softPower);
colnames(TOM) =rownames(TOM) =gene.names
dissTOM=1-TOM
#hierarchical clustering of the genes based on the TOM dissimilarity measure
geneTree = flashClust(as.dist(dissTOM),method="average");
#plot the resulting clustering tree (dendrogram)
plot(geneTree, xlab="", sub="",cex=0.3);
# Set the minimum module size
minModuleSize = 2;
# Module identification using dynamic tree cut
dynamicMods = cutreeDynamic(dendro = geneTree,  method="tree", minClusterSize = minModuleSize);
#dynamicMods = cutreeDynamic(dendro = geneTree, distM = dissTOM, method="hybrid", deepSplit = 2, pamRespectsDendro = FALSE, minClusterSize = minModuleSize);
sizeGrWindow(18, 9)
par(mfrow = c(1,1));
cex1 = 0.9;
#plot the resulting clustering tree (dendrogram)
plot(geneTree, xlab="", sub="",cex=0.3);
# Set the minimum module size
minModuleSize = 2;
# Module identification using dynamic tree cut
dynamicMods = cutreeDynamic(dendro = geneTree,  method="tree", minClusterSize = minModuleSize);
#dynamicMods = cutreeDynamic(dendro = geneTree, distM = dissTOM, method="hybrid", deepSplit = 2, pamRespectsDendro = FALSE, minClusterSize = minModuleSize);
#discard the unassigned genes, and focus on the rest
restGenes= (dynamicColors != "grey")
diss1=1-TOMsimilarityFromExpr(t_Rawdata[,restGenes], power = softPower)
colnames(diss1) =rownames(diss1) =gene.names[restGenes]
hier1=flashClust(as.dist(diss1), method="average" )
plotDendroAndColors(hier1, dynamicColors[restGenes], "Dynamic Tree Cut", dendroLabels = FALSE, hang = 0.03, addGuide = TRUE, guideHang = 0.05, main = "Gene dendrogram and module colors")
#the following command gives the module labels and the size of each module. Lable 0 is reserved for unassigned genes
table(dynamicMods)
#Plot the module assignment under the dendrogram; note: The grey color is reserved for unassigned genes
dynamicColors = labels2colors(dynamicMods)
table(dynamicColors)
#set the diagonal of the dissimilarity to NA
diag(diss1) = NA;
#Visualize the Tom plot. Raise the dissimilarity matrix to the power of 4 to bring out the module structure
sizeGrWindow(7,7)
TOMplot(diss1, hier1, as.character(dynamicColors[restGenes]))
module_colors= setdiff(unique(dynamicColors), "grey")
for (color in module_colors){
module=gene.names[which(dynamicColors==color)]
write.table(module, paste("module_",color, ".txt",sep=""), sep="\t", row.names=FALSE, col.names=FALSE,quote=FALSE)
}
#turn adjacency matrix into topological overlap to minimize the effects of noise and spurious associations
TOM=TOMsimilarityFromExpr(t_Rawdata, networkType = "unsigned", TOMType = "unsigned", power = softPower);
colnames(TOM) =rownames(TOM) =std.gene.names
dissTOM=1-TOM
#discard the unassigned genes, and focus on the rest
restGenes= (dynamicColors != "grey")
diss1=1-TOMsimilarityFromExpr(t_Rawdata[,restGenes], power = softPower)
colnames(diss1) =rownames(diss1) =std.gene.names[restGenes]
hier1=flashClust(as.dist(diss1), method="average" )
plotDendroAndColors(hier1, dynamicColors[restGenes], "Dynamic Tree Cut", dendroLabels = FALSE, hang = 0.03, addGuide = TRUE, guideHang = 0.05, main = "Gene dendrogram and module colors")
module_colors= setdiff(unique(dynamicColors), "grey")
for (color in module_colors){
module=std.gene.names[which(dynamicColors==color)]
write.table(module, paste("module_",color, ".txt",sep=""), sep="\t", row.names=FALSE, col.names=FALSE,quote=FALSE)
}
module_colors
module.order <- unlist(tapply(1:ncol(t_Rawdata),as.factor(dynamicColors),I))
m <- t(t(t_Rawdata[,module.order])/apply(t_Rawdata[,module.order],2,max))
heatmap(t(m),zlim=c(0,1),col=gray.colors(100),Rowv=NA,Colv=NA,labRow=NA,scale="none",RowSideColors=dynamicColors[module.order])
MEList = moduleEigengenes(t_Rawdata, colors = dynamicColors)
MEs = MEList$eigengenes
plotEigengeneNetworks(MEs, "", marDendro = c(0,4,1,2), marHeatmap = c(3,4,1,2))
corrplot(adj, diag = FALSE, order = "FPC",
tl.cex = 0.5, method = "color")
corrplot(cor(MEs, method = "spearman", use = "pairwise.complete.obs"),
method = "circle", order = "hclust",
tl.cex = 0.8)
sizeGrWindow(18, 9)
par(mfrow = c(1,1));
cex1 = 0.9;
corrplot(cor(MEs, method = "spearman", use = "pairwise.complete.obs"),
method = "circle", order = "hclust",
tl.cex = 0.8)
corrplot(adj, diag = FALSE, order = "FPC",
tl.cex = 0.5, method = "color")
corrplot(Corr, method = "circle", order = "hclust", tl.cex = 0.8)
corrplot(adj, diag = FALSE, method = "circle", order = "hclust", tl.cex = 0.5)
corrplot(Corr, method = "circle", order = "hclust", tl.cex = 0.5)
corrplot(adj, diag = FALSE, method = "circle", order = "hclust", tl.cex = 0.5)
corrplot(adj.weight, method = "FPC", order = "hclust", tl.cex = 0.5)
corrplot(adj.weight, method = "color", order = "hclust", tl.cex = 0.5)
corrplot(adj.weight, method = "circle", order = "hclust", tl.cex = 0.5)
corrplot(adj, method = "circle", order = "hclust", tl.cex = 0.5)
corrplot(adj, method = "color", order = "hclust", tl.cex = 0.5)
corrplot(adj, method = "color", order = "hclust", tl.cex = 0.5)
corrplot(Corr, method = "circle", order = "hclust", tl.cex = 0.5)
corrplot(adj.weight, method = "color", order = "hclust", tl.cex = 0.5)
View(Corr.weight)
corrplot(as.matrix(adj.weight), method = "color", order = "hclust", tl.cex = 0.5)
corrplot(as.matrix(Corr.weight), method = "color", order = "hclust", tl.cex = 0.5)
View(Corr.weight)
corrplot(as.matrix(Corr.weight.F), method = "color", order = "hclust", tl.cex = 0.5)
corrplot(as.matrix(Corr.weight), method = "color", order = "hclust", tl.cex = 0.5)
adj.weight2 <- as.matrix(adj.weight)
Corr.weight2 <- as.matrix(Corr.weight)
View(adj.weight2)
corrplot(adj.weight2, method = "color", order = "hclust", tl.cex = 0.5)
corrplot(Corr.weight2, method = "color", order = "hclust", tl.cex = 0.5)
corrplot(adj.weight2, method = "color", order = "hclust", tl.cex = 0.5)
corrplot(Corr.weight2, method = "color", order = "hclust", tl.cex = 0.5)
corrplot(Corr.weight2)
corrplot(Corr.weight2, method = "color", order = "hclust", tl.cex = 0.5)
View(Corr.weight)
View(Corr)
View(Corr)
for(i in 1:dim(Corr)[1]) {
for(j in 1:dim(Corr)[2]){
row = rownames(Corr.weight)[i]
col = colnames(Corr.weight)[j]
count = as.integer(TarPred %>% filter(miRNA==row,Gene==col) %>% select('No. Sources'))
if((grepl("miR*", row) &&  !grepl("miR*", col)) || (grepl("miR*", col) &&  !grepl("miR*", row))) {
if(is.na(count) || count == ''){
Corr.weight[i,j] = 0
} else if(count >= 2) {
Corr.weight[i,j] = Corr[i,j]*1
} else if(count == 1) {
Corr.weight[i,j] = Corr[i,j]*0.75
} else {
Corr.weight[i,j] = 0
}
}
}
}
View(Corr.weight)
View(Corr.weight)
for(i in 139:dim(Corr)[1]) {
for(j in 139:dim(Corr)[2]){
row = rownames(Corr.weight)[i]
col = colnames(Corr.weight)[j]
count = as.integer(TarPred %>% filter(miRNA==row,Gene==col) %>% select('No. Sources'))
if(is.na(count) || count == ''){
Corr.weight[i,j] = 0
} else if(count >= 2) {
Corr.weight[i,j] = Corr[i,j]*1
} else if(count == 1) {
Corr.weight[i,j] = Corr[i,j]*0.75
} else {
Corr.weight[i,j] = 0
}
}
}
View(Corr.weight)
for(i in 1:dim(Corr)[1]) {
for(j in 1:dim(Corr)[2]){
row = rownames(Corr.weight)[i]
col = colnames(Corr.weight)[j]
count = as.integer(TarPred %>% filter(miRNA==row,Gene==col) %>% select('No. Sources'))
if(grepl("miR*",row) && grepl("miR*",col)) {
Corr.weight[i,j] = Corr[i,j]
} else if(!grepl("miR*",row) && !grepl("miR*",col)) {
Corr.weight[i,j] = Corr[i,j]
} else if(is.na(count) || count == ''){
Corr.weight[i,j] = 0
} else if(count >= 2) {
Corr.weight[i,j] = Corr[i,j]*1
} else if(count == 1) {
Corr.weight[i,j] = Corr[i,j]*0.75
} else {
Corr.weight[i,j] = 0
}
}
}
View(Corr.weight)
for(i in 1:dim(Corr)[1]) {
for(j in 1:dim(Corr)[2]){
row = rownames(Corr.weight)[i]
col = colnames(Corr.weight)[j]
count = as.integer(TarPred %>% filter(miRNA==row,Gene==col) %>% select('No. Sources'))
count2 = as.integer(TarPred %>% filter(miRNA==col,Gene==row) %>% select('No. Sources'))
if(grepl("^miR*|^let*",row) && grepl("^miR*|^let*",col)) {
Corr.weight[i,j] = Corr[i,j]
} else if(!grepl("^miR*|^let*",row) && !grepl("^miR*|^let*",col)) {
Corr.weight[i,j] = Corr[i,j]
} else if(grepl("^miR*|^let*",row) && !grepl("^miR*|^let*",col)) {
if(is.na(count) || count == '') {
Corr.weight[i,j] = 0
} else if(count >= 2) {
Corr.weight[i,j] = Corr[i,j]*1
} else if(count == 1) {
Corr.weight[i,j] = Corr[i,j]*0.75
} else {
Corr.weight[i,j] = 0
}
} else if(!grepl("^miR*|^let*",row) && grepl("^miR*|^let*",col)) {
if(is.na(count2) || count2 == '') {
Corr.weight[i,j] = 0
} else if(count2 >= 2) {
Corr.weight[i,j] = Corr[i,j]*1
} else if(count2 == 1) {
Corr.weight[i,j] = Corr[i,j]*0.75
} else {
Corr.weight[i,j] = 0
}
}
}
}
for(i in 1:dim(adj)[1]) {
for(j in 1:dim(adj)[2]){
row = rownames(adj.weight)[i]
col = colnames(adj.weight)[j]
count = as.integer(TarPred %>% filter(miRNA==row,Gene==col) %>% select('No. Sources'))
count2 = as.integer(TarPred %>% filter(miRNA==col,Gene==row) %>% select('No. Sources'))
if(grepl("^miR*|^let*",row) && grepl("^miR*|^let*",col)) {
adj.weight[i,j] = adj[i,j]
} else if(!grepl("^miR*|^let*",row) && !grepl("^miR*|^let*",col)) {
adj.weight[i,j] = adj[i,j]
} else if(grepl("^miR*|^let*",row) && !grepl("^miR*|^let*",col)) {
if(is.na(count) || count == '') {
adj.weight[i,j] = 0
} else if(count >= 2) {
adj.weight[i,j] = adj[i,j]*1
} else if(count == 1) {
adj.weight[i,j] = adj[i,j]*0.75
} else {
adj.weight[i,j] = 0
}
} else if(!grepl("^miR*|^let*",row) && grepl("^miR*|^let*",col)) {
if(is.na(count2) || count2 == '') {
adj.weight[i,j] = 0
} else if(count2 >= 2) {
adj.weight[i,j] = adj[i,j]*1
} else if(count2 == 1) {
adj.weight[i,j] = adj[i,j]*0.75
} else {
adj.weight[i,j] = 0
}
}
}
}
rows_to_remove.adj <- which(row.names(adj.weight) %in% prot.F)
cols_to_remove.adj <- which(colnames(adj.weight) %in% miR.F)
adj.weight.F <- adj.weight[-rows_to_remove.adj,-cols_to_remove.adj]
write.csv(adj.weight.F,"Weighted_Adjacencies.csv")
rows_to_remove.corr <- which(row.names(Corr.weight) %in% prot.F)
cols_to_remove.corr <- which(colnames(Corr.weight) %in% miR.F)
Corr.weight.F <- Corr.weight[-rows_to_remove.adj,-cols_to_remove.adj]
write.csv(Corr.weight.F,"Weighted_Spearman.csv")
adj.weight2 <- as.matrix(adj.weight)
Corr.weight2 <- as.matrix(Corr.weight)
corrplot(adj.weight2, method = "color", order = "hclust", tl.cex = 0.5)
corrplot(Corr.weight2, method = "color", order = "hclust", tl.cex = 0.5)
corrplot(Corr.weight2, method = "color", order = "hclust", tl.cex = 0.5)
corrplot(Corr.weight2, method = "circle", order = "hclust", tl.cex = 0.5)
corrplot(Corr.weight2, method = "color", order = "hclust", tl.cex = 0.5)
corrplot(adj.weight2, method = "color", order = "hclust", tl.cex = 0.5)
corrplot(adj, method = "color", order = "hclust", tl.cex = 0.5)
corrplot(Corr, method = "circle", order = "hclust", tl.cex = 0.5)
corrplot(Corr, method = "color", order = "hclust", tl.cex = 0.5)
